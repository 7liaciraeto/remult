diff --git a/package.json b/package.json
index 4753265..22b6f88 100644
--- a/package.json
+++ b/package.json
@@ -10,7 +10,11 @@
     "@types/node": "^12.0.0",
     "@types/react": "^17.0.0",
     "@types/react-dom": "^17.0.0",
+    "axios": "^0.22.0",
     "express": "^4.17.1",
+    "express-jwt": "^6.1.0",
+    "jsonwebtoken": "^8.5.1",
+    "jwt-decode": "^3.1.2",
     "react": "^17.0.2",
     "react-dom": "^17.0.2",
     "react-scripts": "4.0.3",
@@ -26,6 +30,9 @@
     "test": "react-scripts test",
     "eject": "react-scripts eject"
   },
+  "browser": {
+    "jsonwebtoken": false
+  },
   "proxy": "http://localhost:3002",
   "eslintConfig": {
     "extends": [
@@ -47,6 +54,8 @@
   },
   "devDependencies": {
     "@types/express": "^4.17.13",
+    "@types/express-jwt": "^6.0.2",
+    "@types/jsonwebtoken": "^8.5.5",
     "ts-node-dev": "^1.1.8"
   }
-}
+}
\ No newline at end of file
diff --git a/src/AuthService.ts b/src/AuthService.ts
new file mode 100644
index 0000000..765cde9
--- /dev/null
+++ b/src/AuthService.ts
@@ -0,0 +1,44 @@
+import { BackendMethod, Remult } from 'remult';
+import * as jwt from 'jsonwebtoken';
+import jwtDecode from 'jwt-decode';
+
+const AUTH_TOKEN_KEY = "authToken";
+
+export class AuthService {
+  constructor(private remult: Remult) {
+  }
+
+  async signIn(username: string) {
+    this.setAuthToken(await AuthService.signIn(username));
+  }
+  @BackendMethod({ allowed: true })
+  static async signIn(username: string) {
+    let validUsers = [
+      { id: "1", name: "Jane", roles: [] },
+      { id: "2", name: "Steve", roles: [] }
+    ];
+    let user = validUsers.find(user => user.name === username);
+    if (!user)
+      throw new Error("Invalid User");
+    return jwt.sign(user, getJwtSigningKey());
+  }
+
+  setAuthToken(token: string) {
+    this.remult.setUser(jwtDecode(token));
+    sessionStorage.setItem(AUTH_TOKEN_KEY, token);
+  }
+  static fromStorage(): string {
+    return sessionStorage.getItem(AUTH_TOKEN_KEY)!;
+  }
+
+  signOut() {
+    this.remult.setUser(undefined!);
+    sessionStorage.removeItem(AUTH_TOKEN_KEY);
+  }
+}
+
+export function getJwtSigningKey() {
+  if (process.env.NODE_ENV === "production")
+    return process.env.TOKEN_SIGN_KEY!;
+  return "my secret key";
+}
\ No newline at end of file
diff --git a/src/common.ts b/src/common.ts
index 2359214..d489ee4 100644
--- a/src/common.ts
+++ b/src/common.ts
@@ -1,3 +1,29 @@
 import { Remult } from "remult";
+import axios, { AxiosResponse } from 'axios';
+import { AuthService } from "./AuthService";
 
-export const remult = new Remult(); 
\ No newline at end of file
+function axiosConfig() {
+    let token = AuthService.fromStorage();;
+    if (token) {
+        return {
+            headers: {
+                Authorization: "Bearer " + token
+            }
+        }
+    }
+    return {};
+}
+function wrapAxios<T>(what: Promise<AxiosResponse<T>>): Promise<any> {
+    return what.then(x => x.data, err => {
+        if (typeof err.response.data === "string")
+            throw Error(err.response.data);
+        throw err.response.data
+    });
+}
+export const remult = new Remult({
+    get: (url) => wrapAxios(axios.get(url, axiosConfig())),
+    put: (url, data) => wrapAxios(axios.put(url, data, axiosConfig())),
+    post: (url, data) => wrapAxios(axios.post(url, data, axiosConfig())),
+    delete: (url) => wrapAxios(axios.delete(url, axiosConfig()))
+});
+export const auth = new AuthService(remult);
\ No newline at end of file
diff --git a/src/server/index.ts b/src/server/index.ts
index 8e42794..6fd48fc 100644
--- a/src/server/index.ts
+++ b/src/server/index.ts
@@ -1,6 +1,13 @@
 import express from 'express';
+import expressJwt from 'express-jwt';
+import { getJwtSigningKey } from '../AuthService';
 import { initExpress } from 'remult/server';
 
 let app = express();
+app.use(expressJwt({
+    secret: getJwtSigningKey(),
+    credentialsRequired: false,
+    algorithms: ['HS256']
+}));
 initExpress(app);
 app.listen(3002, () => console.log("Server started"));
\ No newline at end of file
